          ;principia primitiva XATTM
          push ds             ; prologo
          push es
          push ax
          push bx
          ; borra la bandera de acarreo
          xchg bx,sp          ; intercambia NUMBAL y SP
          and  word ptr ss:[bx+0Ch],0FFFEh; Cambia reg de band.
          xchg bx,sp          ; intercambia SP y NUMBAL
          ; obtiene la direccion del buz¢n
          mov  ds,cs:data_16e ; Obtiene ZDS
          mov  ax,bx          ; ax NUMBAL
          shl  bx,1           ; NUMBAL*2 
          shl  bx,1           ; NUMBAL*4 
          shl  bx,1           ; NUMBAL*8 
          sub  bx,ax          ; NUMBAL*7
          shl  bx,1           ; NUMBAL*14 
          add  bx,ds:data_11e ; bx es ptr del buzon NUMBAL
          ; Prueba el estado de la lista de mensajes
          ; y toma el apuntador de mensaje final en buzon ax:dx
loc_88:                       ;
          mov  dx,[bx+0Ah]    ; dx es ptr off mensaje inicial
          mov  ax,[bx+0Ch]    ; ax es ptr seg mensaje inicial 
          cmp  ax,dx          ; prueba si seg no es igual al off
          jne  loc_89         ; Salta si cola de mensaje no es
                              ;vacia  
          or   ax,ax          ; Prueba si seg y off son nulos 
          jz   loc_91         ; Salta si la cola esta vacia 
          ; hay mensajes en la lista. Elimina el mensaje al 
          ; inicio de la cola
loc_89:                       ; 
          ; Toma enlace siguiente mensaje en la  lista de mensaje
          push ax             ; Guarda seg mensaje
          mov  es,ax          ; ES es ptr seg mensaje
          xchg bx,dx          ; intercambia ptr mensaje y ptr
                              ;mensaje inicial 
          les  ax,dword ptr es:[bx]     ;Carga en ES:AX ptr de
                                        ;mensaje siguiente 
          xchg bx,dx          ; intercambia ptr mensaje inicial
                              ;y ptr mensaje
          ; Pone el nuevo valor de mensaje inicial en la lista
          ;de mesajes dentro del buz¢n
          mov  [bx+0Ah],ax    ; Guarda off de mensaje
          mov  [bx+0Ch],es    ; Guarda seg de mensaje
          ; prueba si la lista de mensaje esta vacia
          or   ax,[bx+0Ch]    ; enmascara seg y off del mensaje
          jnz  loc_90         ; Salta si cola no esta vacia 
          ; borra el apuntador mensaje final  
          mov  [bx+6],ax      ; borra ptr off mensaje final 
          mov  [bx+8],ax      ; borra ptr seg mensaje final 
loc_90:                       ;
          ; epilogo no recupera el valor es
          pop  es             ; recupera el ptr seg del mensaje
          pop  bx             ; recupera bx
          pop  ax             ; recupera ax
          add  sp,2           ; debe recupera es (lo salta)
          pop  ds             ; recupera ds
          iret                ; Retorno interrupci¢n 
          
loc_91:                       ; 
          jmp  loc_77         ;  Continua en tratamiento igua
                              ;que la primitiva XATTS

;continuacion del codigo codigo com£n tambien para primitiva
XATTS
; 
;    Elimina de la lista de mesaje el ultimo mesaje

loc_77:                            ; 
          push cx                  ; Guarda contexto
          push dx
          push bp
          push si
          push di
          ; Bloquea la tarea que solicito la espera en este buz¢n
          mov  di,bx               ; respalda apuntador del buz¢n
          mov  bx,ds:data_16e      ; Obtiene apuntado de tarea
                                   ; en ejecucion
          and  byte ptr [bx],0FEh  ; Cambia el estado a bloqueada
          ; Cambia de pila de la tarea a pila del sistema
          sub  bx,4                ; bx apuntador de la pila de
                                   ;la tarea
          mov  [bx],sp             ; Guarda SP
          mov  [bx+2],ss           ; Guarda SS
          mov  ax,ds               ; 
          mov  ss,ax               ; Pone SS a ZDS
          mov  sp,0D4h             ; 
          ; Determina si se solicito espera con alarma
          or   cx,cx               ; prueba si TIMEOUT es cero
          jnz  loc_80              ; Salta si solicito tiempo
                                   ;de alarma 

          ; Inserta a tarea a la cola se espera de este buz¢n 
          sub  bx,8                ; Apunta a PTR de comunicaci¢n
loc_78:                            ;  
          mov  [bx],di             ; Guarda apuntador del buz¢n
          mov  si,bx               ; copia apuntador PTR comunic
          xchg si,[di+2]           ; Pone enlace tarea inicial
          or   si,si               ; Prueba si hay mas elemento
                                   ;en la lista 
          jz   loc_79              ; Salta si no mas elementos 
          mov  [si+4],bx           ; Pone enlace tarea siguiente
          mov  [bx+6],si           ; Pone enlace tarea anterior
          jmp  loc_1               ; Salta a primitiva START 
          ; Caso lista vacia y solo se ha insertado un elemento
loc_79:                            ; 
          mov  [di+4],bx           ; Pone enlace final
          jmp  loc_1               ; Salta a primitiva START 

          ; Inserta la tarea en la cola de espera de alarmas
loc_80:                            ; 
          sub  bx,0Eh              ; bx apunta a campo de
                                   ;alarma en el descriptor de
                                   ;la tarea 
          call sub_3               ; Subrutina que inserta a
                                   ;proceso en la cola
          add  bx,6                ; Apunta a PTR de comunicacion
          jmp  short loc_78        ; Continua insercion en
                                   ;espera de este buz¢n 
