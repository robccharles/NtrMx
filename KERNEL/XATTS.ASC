
          push ds             ;principio de la primitiva XATTS
          push es             ;prologo
          push ax
          push bx
          mov  ds,cs:data_16e ; Obtiene la ZDS
          ; Borra la bandera de acarreo
          xchg bx,sp
          and  word ptr ss:[bx+0Ch],0FFFEh
          xchg bx,sp
          ;  Calcula de apuntador de se바l
          shl  bx,1           ; NUMSIG*2
          mov  ax,bx
          shl  bx,1           ; NUMSIG*4
          add  bx,ax          ; NUMSIG*6
          add  bx,ds:data_10e ; BASESIG+NUSIG*6
          ; Prueba si la se바l es activa
loc_75:                            ; 
          test byte ptr [bx],1     ; prueba bit 1 se바l
          jz   loc_77              ; Salta si no esta activa
          ; Prueba si la se바l es un impulso
          test byte ptr [bx],2     
          jz   loc_76              ; Salta si no es impulso 
          and  byte ptr [bx],0FEh  ; Borra el impulso
loc_76:                            ; Epilogo
          pop  bx
          pop  ax
          pop  es
          pop  ds
          iret                     ; retorno de Interrupcion 

          ;Tratamiento de la se바l bloqueada (Espera de la se바l)
loc_77:                            ; 
          push cx                  ; Guarda contexto
          push dx
          push bp
          push si
          push di
          ; Bloquea la tarea que solicito la espera de la se바l
          mov  di,bx               ; respalda apuntador se바l
          mov  bx,ds:data_16e      ; Obtiene apuntado de tarea
                                   ; en ejecucion
          and  byte ptr [bx],0FEh  ; Cambia el estado a bloqueada
          ; Cambia de pila de la tarea a pila del sistema
          sub  bx,4                ; bx apuntador de la pila de
                                   ;la tarea
          mov  [bx],sp             ; Guarda SP
          mov  [bx+2],ss           ; Guarda SS
          mov  ax,ds               ; 
          mov  ss,ax               ; Pone SS a ZDS
          mov  sp,0D4h             ; 
          ; Determina si se solicito espera con alarma
          or   cx,cx               ; prueba si TIMEOUT es cero
          jnz  loc_80              ; Salta si solicito tiempo
                                   ;de alarma 

          ; Inserta a tarea a la cola se espera de la se바l
          sub  bx,8                ; Apunta a PTR de comunicacion
loc_78:                            ;  
          mov  [bx],di             ; Guarda apuntador de se바l
          mov  si,bx               ; copia apuntador PTR comunic
          xchg si,[di+2]           ; Pone enlace tarea inicial
          or   si,si               ; Prueba si hay mas elemento
                                   ;en la lista 
          jz   loc_79              ; Salta si no mas elementos 
          mov  [si+4],bx           ; Pone enlace tarea siguiente
          mov  [bx+6],si           ; Pone enlace tarea anterior
          jmp  loc_1               ; Salta a primitiva START 
          ; Caso lista vacia y solo se ha insertado un elemento
loc_79:                            ; 
          mov  [di+4],bx           ; Pone enlace final
          jmp  loc_1               ; Salta a primitiva START 

          ; Inserta la tarea en la cola de espera de alarmas
loc_80:                            ; 
          sub  bx,0Eh              ; bx apunta a campo de
                                   ;alarma en el descriptor de
                                   ;la tarea 
          call sub_3               ; Subrutina que inserta a
                                   ;proceso en la cola
          add  bx,6                ; Apunta a PTR de comunicacion
          jmp  short loc_78        ; Continua insercion en
                                   ;espera de se바l 
