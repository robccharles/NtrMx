
     Ning믍 registro en modificado por la ejecuci묥 de esta
     primitiva.

CODIGO:

          push ds             ;prologo
                              ;pricipio de primitiva XENVS
          push es
          push ax
          push bx

          ; obtiene apuntador de la se바l    
          shl  bx,1           ; NUNSIG*2 
          mov  ax,bx          ; respalda NUMSIG*2
          shl  bx,1           ; NUNSIG*4 
          add  bx,ax          ; NUMSIG*6
          mov  ds,cs:data_16e      ; Obtiene la ZDS 
          add  bx,ds:data_10e      ; BX apunta a la se바l(NUMSIG)

          ; Cambia el estado de la se바l
          and  byte ptr [bx],0FDh  ; pone se바l pasante
          or   byte ptr [bx],1     ; pone la se바l activa

          ; Prueba la cola de tareas que esperan la se바l

          test word ptr [bx+4],0FFFFh   ; prueba PTR final
          jnz  loc_72              ;Si la cola no esta vacia
          ; termina primitiva 
          pop  bx                  ; epilogo
          pop  ax
          pop  es
          pop  ds
          iret                     ; returna de Interrupcion 

          ; Hay tareas que esta esperando esta se바l.
 
loc_72:                            
          push cx                  ; guarda contexto 
          push dx
          push bp
          push si
          push di

          mov  di,ds:data_16e      ; Obtiene PRT de tarea en
                                   ;ejecuci묥 
          ; Guarda el apuntador de la pila de la tarea en
          ;ejecucion y campia a la pila del sistema
          sub  di,4                ; di apunta a campo SS:SP  
          mov  [di],sp             ; Guarda SP
          mov  [di+2],ss           ; Guarda SS
          mov  ax,ds               ; SS apunta a ZDS
          mov  ss,ax               ;
          mov  sp,0D4h             ; SP pila del sistema

          ;    Obtiene el apuntador al final lista y borra los
          ;enlaces de la se바l 
          mov  di,[bx+4]           ; Obtiene de la se바l el PTR 
                                   ;a la tarea final de la lista
          mov  ax,0                ;Borra los PTR de tareas
          mov  [bx+2],ax           ; al principio de la cola
          mov  [bx+4],ax           ; al final de la cola
          ; Borra los enlaces de la siguiente tarea y pasa a 
          ; estado activo la tarea 
loc_73:                            ;
          
          xor  ax,ax               ; Borra los enlaces de tarea 
          mov  [di],ax             ; PTR de comunicacion
          mov  [di+6],ax           ; enlace de comunic anterio
          or   word ptr [di+0Ch],1 ; activa la tarea
          mov  bx,di               ; Guarda temporalmente PTR de
                                   ;la se바l

          ; Elimina de la cola de alarma a la tarea que esperaba
          ; esperaba la se바l con espera m맞ima
          sub  bx,6                ; Apunta a la alarma de tarea
          test word ptr [bx],0FFFFh ; Espera Alarma
          jz   loc_74              ; Salta si No espera alarma
          test byte ptr [bx+12h],40h; Es tarea ciclica
          jnz  loc_74              ; Salta si es tarea ciclica 
          call sub_4               ; Se elimina la tarea de la
                                   ;cola de alarmas
          ; Prueba si hay mas tareas que esperan esta se바l
loc_74:                            ; 
 
          xchg ax,[di+4]           ; Borra enlace siguiente
          or   ax,ax               ; Prueba si enlace siguiente 
          mov  di,ax               ; es nulo y lo copia en di
          jnz  loc_73              ; Si no cero elimina tarea
                                   ;de cola de tarea que
                                   ;esperan esta se바l 
          jmp  loc_1               ; Fin de la lista y de la
                                   ;primitiva 
